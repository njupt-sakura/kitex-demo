// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package stock

import (
	"context"
	"fmt"
	"github.com/njupt-sakura/kitex-demo/kitex_gen/base"
)

type GetItemStockReq struct {
	ItemId int64 `thrift:"itemId,1,required" frugal:"1,required,i64" json:"itemId"`
}

func NewGetItemStockReq() *GetItemStockReq {
	return &GetItemStockReq{}
}

func (p *GetItemStockReq) InitDefault() {
}

func (p *GetItemStockReq) GetItemId() (v int64) {
	return p.ItemId
}
func (p *GetItemStockReq) SetItemId(val int64) {
	p.ItemId = val
}

func (p *GetItemStockReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetItemStockReq(%+v)", *p)
}

var fieldIDToName_GetItemStockReq = map[int16]string{
	1: "itemId",
}

type GetItemStockRes struct {
	Stock   int64         `thrift:"stock,1" frugal:"1,default,i64" json:"stock"`
	BaseRes *base.BaseRes `thrift:"baseRes,255" frugal:"255,default,base.BaseRes" json:"baseRes"`
}

func NewGetItemStockRes() *GetItemStockRes {
	return &GetItemStockRes{}
}

func (p *GetItemStockRes) InitDefault() {
}

func (p *GetItemStockRes) GetStock() (v int64) {
	return p.Stock
}

var GetItemStockRes_BaseRes_DEFAULT *base.BaseRes

func (p *GetItemStockRes) GetBaseRes() (v *base.BaseRes) {
	if !p.IsSetBaseRes() {
		return GetItemStockRes_BaseRes_DEFAULT
	}
	return p.BaseRes
}
func (p *GetItemStockRes) SetStock(val int64) {
	p.Stock = val
}
func (p *GetItemStockRes) SetBaseRes(val *base.BaseRes) {
	p.BaseRes = val
}

func (p *GetItemStockRes) IsSetBaseRes() bool {
	return p.BaseRes != nil
}

func (p *GetItemStockRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetItemStockRes(%+v)", *p)
}

var fieldIDToName_GetItemStockRes = map[int16]string{
	1:   "stock",
	255: "baseRes",
}

type StockService interface {
	GetItemStock(ctx context.Context, req *GetItemStockReq) (r *GetItemStockRes, err error)
}

type StockServiceGetItemStockArgs struct {
	Req *GetItemStockReq `thrift:"req,1" frugal:"1,default,GetItemStockReq" json:"req"`
}

func NewStockServiceGetItemStockArgs() *StockServiceGetItemStockArgs {
	return &StockServiceGetItemStockArgs{}
}

func (p *StockServiceGetItemStockArgs) InitDefault() {
}

var StockServiceGetItemStockArgs_Req_DEFAULT *GetItemStockReq

func (p *StockServiceGetItemStockArgs) GetReq() (v *GetItemStockReq) {
	if !p.IsSetReq() {
		return StockServiceGetItemStockArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StockServiceGetItemStockArgs) SetReq(val *GetItemStockReq) {
	p.Req = val
}

func (p *StockServiceGetItemStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StockServiceGetItemStockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StockServiceGetItemStockArgs(%+v)", *p)
}

var fieldIDToName_StockServiceGetItemStockArgs = map[int16]string{
	1: "req",
}

type StockServiceGetItemStockResult struct {
	Success *GetItemStockRes `thrift:"success,0,optional" frugal:"0,optional,GetItemStockRes" json:"success,omitempty"`
}

func NewStockServiceGetItemStockResult() *StockServiceGetItemStockResult {
	return &StockServiceGetItemStockResult{}
}

func (p *StockServiceGetItemStockResult) InitDefault() {
}

var StockServiceGetItemStockResult_Success_DEFAULT *GetItemStockRes

func (p *StockServiceGetItemStockResult) GetSuccess() (v *GetItemStockRes) {
	if !p.IsSetSuccess() {
		return StockServiceGetItemStockResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StockServiceGetItemStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetItemStockRes)
}

func (p *StockServiceGetItemStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StockServiceGetItemStockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StockServiceGetItemStockResult(%+v)", *p)
}

var fieldIDToName_StockServiceGetItemStockResult = map[int16]string{
	0: "success",
}
